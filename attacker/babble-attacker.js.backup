'use strict';

class BabbleAttacker {
    attack(packets) {
        // 对30%的事件消息进行篡改
        return packets.map(packet => {
            if (packet.content && packet.content.type === 'babble-event' && Math.random() < 0.3) {
                // 篡改事件数据
                const event = packet.content.event;

                // 攻击方式1：创建事件分叉
                if (Math.random() < 0.5) {
                    event.selfParent = null; // 破坏事件链
                }
                // 攻击方式2：注入虚假交易
                else {
                    event.transactions = ["MALICIOUS_TX_" + Math.random()];
                }
            }
            return packet;
        });
    }

    updateParam() {
        return false;
    }

    constructor(transfer, registerAttackerTimeEvent, eventQ, nodeNum, byzantineNodeNum, getClockTime) {
        this.transfer = transfer;
        this.registerAttackerTimeEvent = registerAttackerTimeEvent;
        this.eventQ = eventQ;
        this.nodeNum = nodeNum;
        this.byzantineNodeNum = byzantineNodeNum;
        this.getClockTime = getClockTime;
    }
}

module.exports = BabbleAttacker;